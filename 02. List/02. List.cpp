#include <iostream>
#include <list>

using namespace std;

/**********************************************************************************
 * 연결리스트 (Linked List)
 *
 * 데이터를 포함하는 노드들을 연결식으로 만든 자료구조
 * 데이터와 다른 데이터 지점의 참조변수를 가진 노드를 기본 단위로 사용
 * 데이터를 노드를 통해 연결식으로 구성하기 때문에 데이터의 추가/삭제에 유용
 * 노드가 메모리에 연속적으로 배치되지 않고 연결 구조로 다른 데이터의 위치를 확인
 ***********************************************************************************/

// <연결리스트 구현>
// 연결리스트는 노드를 기본 단위로 연결식으로 구현
// 노드간의 연결구조에 따라 단방향, 양방향, 환형 으로 구분
//
// 1. 단방향 연결리스트
// 노드가 다음 노드를 참조
// ┌────┬─┐  ┌────┬─┐  ┌────┬─┐  ┌────┬─┐
// │Data│───→│Data│───→│Data│───→│Data│ │
// └────┴─┘  └────┴─┘  └────┴─┘  └────┴─┘
//
// 2. 양방향 연결리스트
// 노드가 이전/다음 노드를 참조
// ┌─┬────┬─┐  ┌─┬────┬─┐  ┌─┬────┬─┐  ┌─┬────┬─┐
// │ │Data│←────→│Data│←────→│Data│←────→│Data│ │
// └─┴────┴─┘  └─┴────┴─┘  └─┴────┴─┘  └─┴────┴─┘
//
// 3. 환형 연결리스트
// 노드가 이전/다음 노드를 참조하며, 시작 노드와 마지막 노드를 참조
//  ┌──────────────────────────────────────────┐
// ┌│┬────┬─┐  ┌─┬────┬─┐  ┌─┬────┬─┐  ┌─┬────┬│┐
// │↓│Data│←────→│Data│←────→│Data│←────→│Data│↓│
// └─┴────┴─┘  └─┴────┴─┘  └─┴────┴─┘  └─┴────┴─┘


// <연결리스트 추가>
// 새로 추가하는 노드가 이전/이후 노드를 참조한 뒤
// 이전/이후 노드가 새로 추가하는 노드를 참조함
// 
//          ┌─┬───┬─┐                      ┌─┬───┬─┐                      ┌─┬───┬─┐ 
//          │ │ C │ │                    ┌───│ C │───┐                  ┌───│ C │───┐
//          └─┴───┴─┘          =>        ↓ └─┴───┴─┘ ↓        =>        ↓ └─┴───┴─┘ ↓
// ┌─┬───┬─┐         ┌─┬───┬─┐    ┌─┬───┬─┐         ┌─┬───┬─┐    ┌─┬───┬─┐ ↑     ↑ ┌─┬───┬─┐
// │ │ A │←───────────→│ B │ │    │ │ A │←───────────→│ B │ │    │ │ A │───┘     └───│ B │ │
// └─┴───┴─┘         └─┴───┴─┘    └─┴───┴─┘         └─┴───┴─┘    └─┴───┴─┘         └─┴───┴─┘


// <연결리스트 삭제>
// 삭제하는 노드의 이전 노드가 이후 노드를 참조한 뒤
// 삭제하는 노드의 이후 노드가 이전 노드를 참조함
// 
//          ┌─┬───┬─┐                      ┌─┬───┬─┐                      ┌─┬───┬─┐
//        ┌──→│ C │←──┐                    │ │ C │←──┐                    │ │ C │ │
//        │ └─┴───┴─┘ │        =>          └─┴───┴─┘ │        =>          └─┴───┴─┘
// ┌─┬───┬│┐         ┌│┬───┬─┐    ┌─┬───┬─┐         ┌│┬───┬─┐    ┌─┬───┬─┐         ┌─┬───┬─┐
// │ │ A │↓│         │↓│ B │ │    │ │ A │──────────→│↓│ B │ │    │ │ A │←───────────→│ B │ │
// └─┴───┴─┘         └─┴───┴─┘    └─┴───┴─┘         └─┴───┴─┘    └─┴───┴─┘         └─┴───┴─┘


// <연결리스트 특징>
// 연결리스트의 경우 데이터를 연속적으로 배치하는 배열과 다르게 연결식으로 구성
// 따라서, 데이터의 추가/삭제 과정에서 다른 데이터의 위치와 무관하게 진행되므로 수월함
// 하지만, 데이터의 접근 과정에서 연속적인 데이터 배치가 아니기 때문에 인덱스 사용 불가


int main()
{
    list<string> container = list<string>();

    // 추가
    container.push_back("0번 데이터");
    container.push_back("1번 데이터");
    container.push_back("2번 데이터");
    container.push_front("3번 데이터");
    container.push_front("4번 데이터");
    container.push_front("5번 데이터");


    // 삭제
    container.pop_back();
    container.pop_front();
    container.remove("0번 데이터");


    // 접근
    cout << container.front() << endl;
    cout << container.back() << endl;
}
